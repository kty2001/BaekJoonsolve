import sys
input = sys.stdin.readline


def consonant(stack):
  cnt = 0
  for i in stack:
    if i not in vowel_list:
      cnt += 1
      if cnt == 2:
        print(*stack, sep = "")
        break
  
def dfs(start, stack):
  if len(stack) == n:
    for vowel in vowel_list:
      if vowel in stack:
        consonant(stack)
        break
    return

  for i in range(start+1, m):
    stack.append(alpha_list[i])
    dfs(i, stack)
    if stack: stack.pop()

n, m = map(int, input().split())
alpha_list = sorted(list(input().split()))
vowel_list = ["a", "e", "i", "o", "u"]
stack = []

for i in range(m-3):
  if stack: stack.pop()
  stack.append(alpha_list[i])
  dfs(i, stack)
-------------------------
import sys


def back_tracking(cnt, idx):

    if cnt == l:
        vo, co = 0, 0

        for i in range(l):
            if answer[i] in consonant:
                vo += 1
            else:
                co += 1

        if vo >= 1 and co >= 2:
            print("".join(answer))

        return

    for i in range(idx, c):
        answer.append(words[i])
        back_tracking(cnt + 1, i + 1)
        answer.pop()


l, c = map(int, sys.stdin.readline().split())
words = sorted(list(map(str, sys.stdin.readline().split())))
consonant = ['a', 'e', 'i', 'o', 'u']
answer = []
back_tracking(0, 0)