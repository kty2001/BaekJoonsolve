from collections import deque

dx = [1, -1, 0, 0, 1, -1, 1, -1]
dy = [0, 0, 1, -1, 1, -1, -1, 1]

def bfs(start_i, start_j):
  dq = deque()
  dq.append((start_i, start_j))
  while dq:
    x, y = dq.popleft()
    for i in range(8):
      nx = x + dx[i]
      ny = y + dy[i]
      if nx < 0 or nx > h-1 or ny < 0 or ny > w-1:
        continue
      else:
        if graph[nx][ny] == 1:
          graph[nx][ny] = 0
          dq.append((nx, ny))

while True:
  w, h = map(int, input().split())
  if w == 0 and h == 0:
    break
    
  graph = []
  cnt = 0
  for i in range(h):
    graph.append(list(map(int, input().split())))
  
  for i in range(h):
    for j in range(w):
      if graph[i][j] == 1:
        graph[i][j] = 0
        cnt += 1
        bfs(i, j)
  
  print(cnt)